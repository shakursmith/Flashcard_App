{"ast":null,"code":"var _jsxFileName = \"/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { readDeck, listCards } from '../utils/api/index.js';\n\nfunction Study() {\n  const [deck, setDeck] = useState();\n  const [cards, setCards] = useState();\n  const [currentCard, setCurrentCard] = useState(0);\n  const [frontSide, setFrontSide] = useState(true);\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    const findDeck = async () => {\n      const currDeck = await readDeck(deckId);\n      setDeck(() => currDeck);\n    };\n\n    findDeck();\n\n    const findCards = async () => {\n      const cardsList = await listCards(deckId);\n      setCards(() => cardsList);\n    };\n\n    findCards();\n  }, [deckId]);\n\n  const nextHandler = () => {\n    if (currentCard === cards.length - 1) {\n      window.confirm(\"Click OK to restart the deck, or CANCEL to return to the homepage.\") ? setCurrentCard(() => 0) : history.push(\"/\");\n    } else {\n      setCurrentCard(currentCard => currentCard + 1);\n      setFrontSide(() => !frontSide);\n    }\n  };\n\n  const flipHandler = () => {\n    setFrontSide(() => !frontSide);\n  };\n\n  if (!deck || !cards) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }\n    }, \"Loading...\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-9 mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      \"aria-label\": \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"ol\", {\n      className: \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-home\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 72\n      }\n    }), \" Home\")), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/decks/${deckId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 57\n      }\n    }, deck.name)), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item active\",\n      \"aria-current\": \"page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, \"Study\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, deck.name, \": Study\")), cards.length > 2 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row p-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }, \"Card \", currentCard + 1, \" of \", cards.length), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, frontSide ? cards[currentCard].front : cards[currentCard].back), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: flipHandler,\n      className: \"btn btn-secondary mr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, \"Flip\"), frontSide ? null : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: nextHandler,\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 53\n      }\n    }, \"Next\")))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row p-3 w-100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }, \"Not enough cards.\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 33\n      }\n    }, \"You need at least 3 cards to study. There are \", cards.length, \" cards in this deck.\"), /*#__PURE__*/React.createElement(Link, {\n      to: `/decks/${deck.id}/cards/new`,\n      className: \"btn btn-primary ml-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-plus\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 107\n      }\n    }), \" Add Cards\")))));\n  }\n}\n\nexport default Study; // The Study screen has the following features:\n// The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n// There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n// The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.\n// All Done!","map":{"version":3,"sources":["/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js"],"names":["React","useState","useEffect","Link","useHistory","useParams","readDeck","listCards","Study","deck","setDeck","cards","setCards","currentCard","setCurrentCard","frontSide","setFrontSide","deckId","history","findDeck","currDeck","findCards","cardsList","nextHandler","length","window","confirm","push","flipHandler","name","front","back","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { readDeck, listCards } from '../utils/api/index.js'\n\n\nfunction Study() {\n    const [deck, setDeck] = useState();\n    const [cards, setCards] = useState();\n    const [currentCard, setCurrentCard] = useState(0);\n    const [frontSide, setFrontSide] = useState(true);\n    const {deckId} = useParams();\n    const history = useHistory();\n    \n    useEffect(() => { \n        const findDeck = async () => { \n            const currDeck = await readDeck(deckId);\n            setDeck(()=> currDeck);    \n        } \n        findDeck();\n            \n        const findCards = async () => { \n            const cardsList = await listCards(deckId);\n            setCards(()=> cardsList);\n        } \n        findCards();\n        \n    }, [deckId]);\n    \n    const nextHandler = () => {\n        if (currentCard === (cards.length-1)) {\n            window.confirm(\"Click OK to restart the deck, or CANCEL to return to the homepage.\")\n            ? setCurrentCard(() => 0) \n            : history.push(\"/\");  \n        } else {\n            setCurrentCard((currentCard) => currentCard+1);\n            setFrontSide(() => !frontSide)\n        }\n    }\n\n    const flipHandler = () => {\n        setFrontSide(() => !frontSide)\n    }\n    \n    if (!deck || !cards) {\n        return (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n               <span className=\"sr-only\">Loading...</span>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"col-9 mx-auto\">\n                {/* Breadcrumbs */}\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                        <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n                    </ol>\n                </nav>\n                {/* Title */}\n                <div>\n                    <h1>{deck.name}: Study</h1>\n                </div>\n                {/* Card */}\n                {cards.length > 2 ?\n                    <div className=\"row p-3\">\n                        <div className=\"card w-100\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Card {currentCard+1} of {cards.length}</h5>\n                                <p className=\"card-text\">{frontSide ? cards[currentCard].front : cards[currentCard].back}</p>\n                                <button onClick={flipHandler} className=\"btn btn-secondary mr-3\">Flip</button>\n                                {frontSide ? null : <button onClick={nextHandler} className=\"btn btn-primary\">Next</button>}\n                                {/* <button onClick={nextHandler} className=\"btn btn-primary\">Next</button> */}\n                            </div>\n                        </div>\n                    </div>\n                :\n                    <div className=\"row p-3 w-100\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Not enough cards.</h5>\n                                <p className=\"card-text\">\n                                    You need at least 3 cards to study. There are {cards.length} cards in this deck.\n                                </p>\n                                <Link to={`/decks/${deck.id}/cards/new`} className=\"btn btn-primary ml-3\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add Cards</Link>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default Study;\n\n// The Study screen has the following features:\n\n    // The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n    // There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n    // The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n    // Cards are shown one at a time, front-side first.\n    // A button at the bottom of each card \"flips\" it to the other side.\n    // After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n    // After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n    // If the user does not restart the deck, they should return to the home screen.\n    // Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.\n\n// All Done!"]},"metadata":{},"sourceType":"module"}