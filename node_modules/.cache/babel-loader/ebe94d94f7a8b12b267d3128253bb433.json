{"ast":null,"code":"var _jsxFileName = \"/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { readDeck } from '../utils/api/index.js';\n\nfunction Study() {\n  const [deck, setDeck] = useState();\n  const {\n    deckId\n  } = useParams();\n  useEffect(() => {\n    const findDeck = async () => {\n      const currDeck = await readDeck(deckId);\n      setDeck(() => currDeck);\n    };\n\n    findDeck();\n  }, [deckId]);\n\n  if (!deck) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"spinner-border text-primary\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      class: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }, \"Loading...\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      \"aria-label\": \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"ol\", {\n      class: \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      class: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-home\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 68\n      }\n    }), \" Home\")), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 53\n      }\n    }), deck.name), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"breadcrumb-item active\",\n      \"aria-current\": \"page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, \"Study\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, \"Card 1\"));\n  }\n}\n\nexport default Study; // The Study screen has the following features:\n// The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n// There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n// The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.","map":{"version":3,"sources":["/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js"],"names":["React","useState","useEffect","Link","useParams","readDeck","Study","deck","setDeck","deckId","findDeck","currDeck","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,SAASC,QAAT,QAAyB,uBAAzB;;AAGA,SAASC,KAAT,GAAiB;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAWL,SAAS,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,QAAQ,GAAG,YAAY;AACzB,YAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACI,MAAD,CAA/B;AACAD,MAAAA,OAAO,CAAC,MAAKG,QAAN,CAAP;AACH,KAHD;;AAIAD,IAAAA,QAAQ;AACX,GANQ,EAMN,CAACD,MAAD,CANM,CAAT;;AAQA,MAAI,CAACF,IAAL,EAAW;AACP,wBACI;AAAK,MAAA,KAAK,EAAC,6BAAX;AAAyC,MAAA,IAAI,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ;AAKH,GAND,MAMO;AACH,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,oBAAW,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,KAAK,EAAC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,KAAK,EAAC,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA4B,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAe;AAAG,MAAA,KAAK,EAAC,YAAT;AAAsB,qBAAY,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAf,UAA5B,CADJ,eAEI;AAAI,MAAA,KAAK,EAAC,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA4B,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B,EAAmDA,IAAI,CAACK,IAAxD,CAFJ,eAGI;AAAI,MAAA,KAAK,EAAC,wBAAV;AAAmC,sBAAa,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,CADJ,CADJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,CADJ;AAYH;AACJ;;AAED,eAAeN,KAAf,C,CAEA;AAEI;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { readDeck } from '../utils/api/index.js'\n\n\nfunction Study() {\n    const [deck, setDeck] = useState();\n    const {deckId} = useParams();\n    \n    useEffect(() => { \n        const findDeck = async () => { \n            const currDeck = await readDeck(deckId);\n            setDeck(()=> currDeck);    \n        } \n        findDeck();\n    }, [deckId]);\n\n    if (!deck) {\n        return (\n            <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"row\">\n                <nav aria-label=\"breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><Link to={\"/\"}><i class=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                        <li class=\"breadcrumb-item\"><Link href=\"#\"></Link>{deck.name}</li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n                    </ol>\n                </nav>\n                <div>Card 1</div>\n            </div>\n        )\n    }\n}\n\nexport default Study;\n\n// The Study screen has the following features:\n\n    // The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n    // There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n    // The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck."]},"metadata":{},"sourceType":"module"}