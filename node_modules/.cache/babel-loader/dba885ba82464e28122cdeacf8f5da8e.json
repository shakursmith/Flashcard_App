{"ast":null,"code":"var _jsxFileName = \"/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { readDeck, listCards } from '../utils/api/index.js';\nimport CardList from './CardList.js';\n\nfunction Study() {\n  const [deck, setDeck] = useState();\n  const [cards, setCards] = useState();\n  const [currentCard, setCurrentCard] = useState(0);\n  const [frontSide, setFrontSide] = useState(true);\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const findDeck = async () => {\n      const currDeck = await readDeck(deckId, abortController.signal);\n      setDeck(() => currDeck);\n    };\n\n    const findCards = async () => {\n      const cardsList = await listCards(deckId, abortController.signal);\n      setCards(() => cardsList);\n    };\n\n    findDeck();\n    findCards();\n    return () => abortController.abort();\n  }, [deckId]);\n\n  const nextHandler = () => {\n    if (currentCard === cards.length - 1) {\n      window.confirm(\"Click OK to restart the deck, or CANCEL to return to the homepage.\") ? setCurrentCard(() => 0) : history.push(\"/\");\n    } else {\n      setCurrentCard(currentCard => currentCard + 1);\n      setFrontSide(() => !frontSide);\n    }\n  };\n\n  const flipHandler = () => {\n    setFrontSide(() => !frontSide);\n  };\n\n  if (Object.keys(deck).length) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-9 mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      \"aria-label\": \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"ol\", {\n      className: \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-home\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 72\n      }\n    }), \" Home\")), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/decks/${deckId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 57\n      }\n    }, deck.name)), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item active\",\n      \"aria-current\": \"page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, \"Study\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, deck.name, \": Study\")), /*#__PURE__*/React.createElement(CardList, {\n      cards: deck.cards,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 16\n      }\n    }, \"Loading...\"));\n  }\n}\n\nexport default Study; // The Study screen has the following features:\n// The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n// There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n// The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.\n// All Done!","map":{"version":3,"sources":["/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js"],"names":["React","useState","useEffect","Link","useHistory","useParams","readDeck","listCards","CardList","Study","deck","setDeck","cards","setCards","currentCard","setCurrentCard","frontSide","setFrontSide","deckId","history","abortController","AbortController","findDeck","currDeck","signal","findCards","cardsList","abort","nextHandler","length","window","confirm","push","flipHandler","Object","keys","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { readDeck, listCards } from '../utils/api/index.js'\nimport CardList from './CardList.js';\n\n\nfunction Study() {\n    const [deck, setDeck] = useState();\n    const [cards, setCards] = useState();\n    const [currentCard, setCurrentCard] = useState(0);\n    const [frontSide, setFrontSide] = useState(true);\n    const {deckId} = useParams();\n    const history = useHistory();\n    \n    useEffect(() => { \n        const abortController = new AbortController();\n        const findDeck = async () => { \n            const currDeck = await readDeck(deckId, abortController.signal);\n            setDeck(()=> currDeck);    \n        } \n        const findCards = async () => { \n            const cardsList = await listCards(deckId, abortController.signal);\n            setCards(()=> cardsList);\n        } \n        findDeck();\n        findCards();\n        return () => abortController.abort();        \n    }, [deckId]);\n    \n    const nextHandler = () => {\n        if (currentCard === (cards.length-1)) {\n            window.confirm(\"Click OK to restart the deck, or CANCEL to return to the homepage.\")\n            ? setCurrentCard(() => 0) \n            : history.push(\"/\");  \n        } else {\n            setCurrentCard((currentCard) => currentCard+1);\n            setFrontSide(() => !frontSide)\n        }\n    }\n\n    const flipHandler = () => {\n        setFrontSide(() => !frontSide)\n    }\n    \n    if (Object.keys(deck).length) {\n        return (\n            <div className=\"col-9 mx-auto\">\n                {/* Breadcrumbs */}\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                        <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n                    </ol>\n                </nav>\n                {/* Title */}\n                <div>\n                    <h1>{deck.name}: Study</h1>\n                </div>\n                <CardList cards={deck.cards}/>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n               <span className=\"sr-only\">Loading...</span>\n            </div>\n        )\n    }\n}\n\nexport default Study;\n\n// The Study screen has the following features:\n\n    // The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n    // There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n    // The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n    // Cards are shown one at a time, front-side first.\n    // A button at the bottom of each card \"flips\" it to the other side.\n    // After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n    // After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n    // If the user does not restart the deck, they should return to the home screen.\n    // Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.\n\n// All Done!"]},"metadata":{},"sourceType":"module"}