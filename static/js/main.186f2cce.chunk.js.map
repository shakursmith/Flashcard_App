{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Study/CardList.js","Layout/Study/Study.js","Layout/Decks/CreateDeck.js","Layout/Decks/Deck.js","Layout/Decks/EditDeck.js","Layout/Decks/CardForm.js","Layout/Decks/AddCard.js","Layout/Decks/EditCard.js","Layout/Home/DeckList.js","Layout/Home/Home.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","CardList","useState","currentCard","setCurrentCard","frontSide","setFrontSide","useParams","history","useHistory","length","front","back","onClick","window","confirm","push","to","aria-hidden","Study","setDeck","useEffect","currDeck","findDeck","Object","keys","aria-label","aria-current","role","CreateDeck","updateDecks","description","newDeck","setNewDeck","formChange","target","value","formSubmit","event","preventDefault","onSubmit","class","type","onChange","placeholder","rows","Deck","useRouteMatch","abortController","AbortController","deckInfo","abort","deleteHandler","go","map","index","key","EditDeck","editDeck","CardForm","AddCard","addCard","EditCard","editCard","cardInfo","DeckList","cardsLength","Home","deckLength","decks","setDecks","decksFromApi","getDecks","Layout","setDeckLength","newDecks","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.186f2cce.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\n\n\nfunction CardList({ cards }) {\n    const [currentCard, setCurrentCard] = useState(0);\n    const [frontSide, setFrontSide] = useState(true);\n    const {deckId} = useParams();\n    const history = useHistory();\n    \n    const nextHandler = () => {\n        if (currentCard === (cards.length-1)) {\n            window.confirm(\"Click OK to restart the deck, or CANCEL to return to the homepage.\")\n            ? setCurrentCard(() => 0) \n            : history.push(\"/\");  \n        } else {\n            setCurrentCard((currentCard) => currentCard+1);\n            setFrontSide(() => !frontSide)\n        }\n    }\n\n    const flipHandler = () => {\n        setFrontSide(() => !frontSide)\n    }\n \n    if (cards.length > 2) { \n        return (\n            <div className=\"row p-3\">\n                <div className=\"card w-100\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Card {currentCard+1} of {cards.length}</h5>\n                        <p className=\"card-text\">{frontSide ? cards[currentCard].front : cards[currentCard].back}</p>\n                        <button onClick={flipHandler} className=\"btn btn-secondary mr-3\">Flip</button>\n                        {frontSide ? null : <button onClick={nextHandler} className=\"btn btn-primary\">Next</button>}\n                        {/* <button onClick={nextHandler} className=\"btn btn-primary\">Next</button> */}\n                    </div>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"row p-3 w-100\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Not enough cards.</h5>\n                        <p className=\"card-text\">\n                            You need at least 3 cards to study. There are {cards.length} cards in this deck.\n                        </p>\n                        <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary ml-3\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add Cards</Link>\n                    </div>\n                </div>\n            </div>\n        )    \n    }\n}\n\nexport default CardList;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { readDeck } from '../../utils/api/index.js'\nimport CardList from './CardList';\n\n\nfunction Study() {\n    const [deck, setDeck] = useState({});\n    const {deckId} = useParams();\n    \n    useEffect(() => { \n        const findDeck = async () => { \n            const currDeck = await readDeck(deckId);\n            setDeck(()=> currDeck);    \n        };\n        findDeck();\n    }, [deckId]);\n    \n    if (Object.keys(deck).length) {\n        return (\n            <div className=\"col-9 mx-auto\">\n                {/* Breadcrumbs */}\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                        <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n                    </ol>\n                </nav>\n                {/* Title */}\n                <div>\n                    <h1>{deck.name}: Study</h1>\n                </div>\n                <CardList cards={deck.cards}/>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n               <span className=\"sr-only\">Loading...</span>\n            </div>\n        ) \n    }\n}\n\nexport default Study;","import React, { useState } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport { createDeck } from '../../utils/api/index.js'\n\nfunction CreateDeck({updateDecks}) {\n    const [newDeck, setNewDeck] = useState({name: \"\", description: \"\"});\n    const history = useHistory();\n\n    const formChange = ({ target }) => {\n        setNewDeck({...newDeck, [target.name]: target.value});\n    }\n    \n    const formSubmit = async (event) => {\n        event.preventDefault();\n        const response = await createDeck(newDeck);\n        history.push(`/decks/${response.id}`);\n        updateDecks(1);\n    }\n\n    return (\n        <div className=\"col-9 mx-auto\">\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                    <li className=\"breadcrumb-item\">Create Deck</li>\n                </ol>\n            </nav>\n            <form onSubmit={formSubmit}>\n                <div class=\"form-group\">\n                    <label>Name</label>\n                    <input \n                    type=\"text\" \n                    name=\"name\"\n                    value={newDeck.name}\n                    onChange={formChange}\n                    id=\"name\" \n                    class=\"form-control\" \n                    placeholder=\"Deck Name\" \n                    />\n                </div>\n                <div class=\"form-group\">\n                    <label>Description</label>\n                    <textarea\n                    name=\"description\" \n                    value={newDeck.description}\n                    onChange={formChange}\n                    class=\"form-control\" \n                    id=\"description\" \n                    placeholder=\"Brief description of the deck.\"\n                    rows={4}\n                    />\n                </div>\n                <Link to=\"/\" name=\"cancel\" class=\"btn btn-secondary mr-3\">Cancel</Link>\n                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateDeck;\n                ","import React, { useEffect, useState } from 'react';\nimport { Link, useParams, useHistory, useRouteMatch } from 'react-router-dom';\nimport { deleteCard, readDeck } from '../../utils/api/index.js';\nimport { deleteDeck } from '../../utils/api/index.js';\n\n\n\nfunction Deck({updateDecks}) {\n    const [deck, setDeck] = useState([]);\n    const {deckId} = useParams();\n    const history = useHistory();\n    const { url } = useRouteMatch();\n    const { id, name, description, cards } = deck;\n\n    useEffect(() => {\n        const abortController = new AbortController();\n        const deckInfo = async () => {\n            const response = await readDeck(deckId, abortController.signal);\n            setDeck(() => response);\n        };\n        deckInfo();\n        return () => abortController.abort();\n    }, [deckId])\n\n\n    const deleteHandler = async () => {\n        if (window.confirm(\"Are you sure you want to delete this deck? You will not be able to recover it.\")) {\n          await deleteDeck(id);\n          updateDecks(-1);\n          history.push('/');\n        } else {\n            history.go(0);\n        } \n    }\n\n    if (!deck || !cards) {\n        return (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n               <span className=\"sr-only\">Loading...</span>\n            </div>\n    )} else {\n        return (\n            <div className=\"col-9 mx-auto\">\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                        <li className=\"breadcrumb-item\">{name}</li>\n                    </ol>\n                </nav>\n                <div className=\"card border-0 mb-4\">\n                    <div className=\"card-body\">\n                        <div className=\"row px-3\">\n                            <h5 className=\"card-title\">{name}</h5>\n                        </div>\n                        <p className=\"card-text\">{description}</p>\n                        <div className=\"row px-3\">\n                            <Link to={`/decks/${id}/edit`} className=\"btn btn-secondary\"><i className=\"fa fa-edit\" aria-hidden=\"true\"></i> Edit</Link>\n                            <Link to={`/decks/${id}/study`} className=\"btn btn-primary ml-3\"><i className=\"fa fa-bookmark\" aria-hidden=\"true\"></i> Study</Link>\n                            <Link to={`/decks/${id}/cards/new`} className=\"btn btn-primary ml-3\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add Cards</Link>\n                            <button onClick={deleteHandler} name=\"delete\" value={id} className=\"btn btn-danger ml-auto\"><i className=\"fa fa-trash\" aria-hidden=\"true\"></i></button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row pl-3 pb-2\">\n                    <h1>Cards</h1>\n                </div>\n                {cards.map((card, index) => \n                    <div className=\"row\" key={index}>\n                        <div className=\"col\">\n                            <div className=\"card\">\n                                <div className=\"row card-body\">\n                                    <p className=\"col-6 card-text\">{card.front}</p>\n                                    <p className=\"col-6 card-text\">{card.back}</p>\n                                </div>\n                                <div className=\"d-flex justify-content-end p-4\">\n                                    <Link to={`${url}/cards/${card.id}/edit`} className=\"btn btn-secondary\"><i className=\"fa fa-edit\" aria-hidden=\"true\"></i> Edit</Link>\n                                    <button onClick={async () => {\n                                        if (window.confirm(\"Are you sure you want to delete this card? You will not be able to recover it.\")) {\n                                          await deleteCard(card.id);\n                                          updateDecks(-1);\n                                          history.go(0);\n                                        } else {\n                                            history.go(0);\n                                        } \n                                    }} name=\"deleteCard\" value={card.id} className=\"btn btn-danger ml-3\"><i className=\"fa fa-trash\" aria-hidden=\"true\"></i></button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        )}\n}\n\nexport default Deck;\n\n// The Deck screen has the following features:\n\n    // The path to this screen should include the deckId (i.e., /decks/:deckId).\n    // There is a breadcrumb navigation bar with a link to home / followed by the name of the deck (e.g., Home/React Router).\n    // The screen includes the deck name (e.g., \"React Router\") and deck description (e.g., \"React Router is a collection of navigational components that compose declaratively in your application\").\n    // The screen includes \"Edit\", \"Study\", \"Add Cards\", and \"Delete\" buttons. Each button takes the user to a different destination, as follows:\n\n    // | Button Clicked | Destination |\n    // | -------------- | ---------------------------------------------------------------------------------------------- |\n    // | \"Edit\" | Edit Deck Screen |\n    // | \"Study\" | Study screen |\n// | \"Add Cards\" | Add Card screen |\n    // | \"Delete\" | Shows a warning message before deleting the deck]( See the \"Delete Card Prompt\" section below) |\n\n// Each card in the deck:\n\n    // is listed on the page under the \"Cards\" heading.\n    // shows a question and the answer to the question.\n// has an “Edit” button that takes the user to the Edit Card screen when clicked.\n// has a “Delete” button that allows that card to be deleted.","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { readDeck, updateDeck } from '../../utils/api/index.js'\n\nfunction EditDeck({updateDecks}) {\n    const [deck, editDeck] = useState({name: \"\", description: \"\"});\n    const history = useHistory();\n    const {deckId} = useParams();\n\n    useEffect(() => {\n        const abortController = new AbortController();\n        const deckInfo = async () => {\n            const response = await readDeck(deckId, abortController.signal);\n            editDeck(() => response);\n        };\n        deckInfo();\n        return () => abortController.abort();\n    }, [deckId])\n\n    const formChange = ({ target }) => {\n        editDeck({...deck, [target.name]: target.value});\n    }\n    \n    const formSubmit = async (event) => {\n        event.preventDefault();\n        const response = await updateDeck(deck);\n        history.push(`/decks/${response.id}`);\n        updateDecks(1);\n    }\n\n    if (!deck) {\n        return (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n               <span className=\"sr-only\">Loading...</span>\n            </div>\n    )} else {\n        return (\n            <div className=\"col-9 mx-auto\">\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                        <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                        <li className=\"breadcrumb-item\">Edit Deck</li>\n                    </ol>\n                </nav>\n                <div className=\"row pl-3 pb-2\">\n                    <h1>Edit Deck</h1>\n                </div>\n                <form onSubmit={formSubmit}>\n                    <div class=\"form-group\">\n                        <label>Name</label>\n                        <input \n                        type=\"text\" \n                        name=\"name\"\n                        value={deck.name}\n                        onChange={formChange}\n                        id=\"name\" \n                        class=\"form-control\" \n                        placeholder={deck.name} \n                        />\n                    </div>\n                    <div class=\"form-group\">\n                        <label>Description</label>\n                        <textarea\n                        name=\"description\" \n                        value={deck.description}\n                        onChange={formChange}\n                        class=\"form-control\" \n                        id=\"description\" \n                        placeholder={deck.description}\n                        rows={4}\n                        />\n                    </div>\n                    <Link to={`/decks/${deckId}`} name=\"cancel\" class=\"btn btn-secondary mr-3\">Cancel</Link>\n                    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EditDeck;\n                ","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction CardForm({ formSubmit, formChange, card, deckId }) {\n\n    return (\n        <form id=\"cardForm\" onSubmit={formSubmit}>\n                <div className=\"form-group\">\n                    <label>Front</label>\n                    <textarea  \n                    name=\"front\"\n                    value={card.front}\n                    onChange={formChange}\n                    id=\"front\" \n                    className=\"form-control\" \n                    placeholder=\"Front side of card\"\n                    rows={4}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Back</label>\n                    <textarea\n                    name=\"back\" \n                    value={card.back}\n                    onChange={formChange}\n                    className=\"form-control\" \n                    id=\"back\" \n                    placeholder=\"Back side of card\"\n                    rows={4}\n                    />\n                </div>\n                <Link to={`/decks/${deckId}`} name=\"cancel\" className=\"btn btn-secondary mr-3\">Done</Link>\n                <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n            </form>\n    )\n\n}\n\nexport default CardForm;","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from 'react-router-dom';\nimport { createCard, readDeck } from '../../utils/api/index.js'\nimport CardForm from \"./CardForm.js\";\n\nfunction AddCard({updateDecks}) {\n    const [deck, setDeck] = useState([]);\n    const [card, addCard] = useState({front: \"\", back: \"\", deckId: \"\"});\n    const {deckId} = useParams();\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        const deckInfo = async () => {\n            const response = await readDeck(deckId, abortController.signal);\n            setDeck(() => response);\n        };\n        deckInfo();\n        return () => abortController.abort();\n    }, [deckId])\n\n    const formChange = ({ target }) => {\n        addCard({...card, [target.name]: target.value});\n    }\n    \n    const formSubmit = async (event) => {\n        event.preventDefault();\n        addCard({...card, deckId: deckId});\n        await createCard(deckId, card);\n        updateDecks(1);\n        addCard({front: \"\", back: \"\", deckId: \"\"});\n    }\n\n    return (\n        <div className=\"col-9 mx-auto\">\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item\">Add Card</li>\n                </ol>\n            </nav>\n            <div className=\"row pl-3 pb-2\">\n                <h1>{deck.name}: Add Card</h1>\n            </div>\n            <CardForm formSubmit={formSubmit} formChange={formChange} card={card} deckId={deckId} />\n        </div>\n    )\n}\n\nexport default AddCard;\n                ","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { updateCard, readDeck, readCard } from '../../utils/api/index.js'\nimport CardForm from \"./CardForm.js\";\n\nfunction EditCard({updateDecks}) {\n    const [deck, setDeck] = useState([]);\n    const [card, editCard] = useState({front: \"\", back: \"\", deckId: \"\"});\n    const {deckId, cardId} = useParams();\n    const history = useHistory();\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        const cardInfo = async () => {\n            const response = await readCard(cardId, abortController.signal);\n            editCard(() => response);\n        };\n        cardInfo();\n        return () => abortController.abort();\n    }, [cardId])\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        const deckInfo = async () => {\n            const response = await readDeck(deckId, abortController.signal);\n            setDeck(() => response);\n        };\n        deckInfo();\n        return () => abortController.abort();\n    }, [deckId])\n\n    const formChange = ({ target }) => {\n        editCard({...card, [target.name]: target.value});\n    }\n    \n    const formSubmit = async (event) => {\n        event.preventDefault();\n        await updateCard(card);\n        history.push(`/decks/${deck.id}`);\n        updateDecks(1);\n    }\n\n    return (\n        <div className=\"col-9 mx-auto\">\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                    <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                    <li className=\"breadcrumb-item\">Edit Card {cardId}</li>\n                </ol>\n            </nav>\n            <div className=\"row pl-3 pb-2\">\n                <h1>Edit Card</h1>\n            </div>\n            <CardForm formSubmit={formSubmit} formChange={formChange} card={card} deckId={deckId} />\n        </div>\n    )\n}\n\nexport default EditCard;\n                ","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { deleteDeck } from '../../utils/api/index.js'\n\nfunction DeckList({deck, updateDecks}) {\n    const { id, name, description, cards } = deck;\n    const cardsLength = cards.length;\n    const history = useHistory();\n\n    const deleteHandler = async () => {\n          if (window.confirm(\"Are you sure you want to delete this deck? You will not be able to recover it.\")) {\n            await deleteDeck(id);\n            updateDecks(-1)\n            history.go(0)\n          } else {\n              history.go(0)\n          } \n      }\n\n    return ( \n        <div className=\"card w-75 mb-4\">\n            <div className=\"card-body\">\n                <div className=\"row px-3\">\n                    <h5 className=\"card-title\">{name}</h5>\n                    <p className=\"ml-auto\">{cardsLength} cards</p>\n                </div>\n                <p className=\"card-text\">{description}</p>\n                <div className=\"row px-3\">\n                    <Link to={`/decks/${id}`} className=\"btn btn-secondary\"><i className=\"fa fa-eye\" aria-hidden=\"true\"></i> View</Link>\n                    <Link to={`/decks/${id}/study`} className=\"btn btn-primary ml-3\"><i className=\"fa fa-bookmark\" aria-hidden=\"true\"></i> Study</Link>\n                    <button onClick={deleteHandler} name=\"delete\" value={id} className=\"btn btn-danger ml-auto\"><i className=\"fa fa-trash\" aria-hidden=\"true\"></i></button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DeckList;","import React, { useState, useEffect } from \"react\";\nimport DeckList from \"./DeckList\";\nimport { Link } from \"react-router-dom\";\nimport { listDecks } from '../../utils/api/index.js'\n\nfunction Home({updateDecks, deckLength}) {\n  const [decks, setDecks] = useState([]);\n\n  useEffect(() => { \n    const abortController = new AbortController();\n    const getDecks = async () => { \n      const decksFromApi = await listDecks(abortController.signal);\n        setDecks(() => decksFromApi)\n        } \n    getDecks();\n    return () => abortController.abort(); \n  }, [deckLength])\n\n    return (\n      <div>  \n        <div className=\"row mx-auto w-75\">\n            <Link to=\"/decks/new\" className=\"btn btn-secondary w-25 mb-3\"><i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Create Deck</Link>\n        </div>\n        <div className=\"row w-100 mx-auto flex-column align-items-center\">\n            {decks.map((deck) => <DeckList key={deck.id} deck={deck} updateDecks={updateDecks} />)}\n        </div>\n      </div>\n    )\n}\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Study from \"./Study/Study\";\nimport { Switch, Route } from \"react-router-dom\";\nimport CreateDeck from \"./Decks/CreateDeck\";\nimport Deck from \"./Decks/Deck\";\nimport EditDeck from \"./Decks/EditDeck\";\nimport AddCard from \"./Decks/AddCard\";\nimport EditCard from \"./Decks/EditCard\";\nimport Home from \"./Home/Home\";\n\nfunction Layout() {\n  const [deckLength, setDeckLength] = useState(0);\n\n  const updateDecks = (newDecks) => {\n    setDeckLength(() => deckLength + newDecks)\n  }\n \n  return (\n    <div>\n      <Header />\n      <div className=\"container mb-4\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home updateDecks={updateDecks} deckLength={deckLength} />\n          </Route>\n          <Route path=\"/decks/new\">\n            <CreateDeck updateDecks={updateDecks} />\n          </Route>\n          <Route path=\"/decks/:deckId\" exact>\n            <Deck updateDecks={updateDecks} />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeck updateDecks={updateDecks} />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard updateDecks={updateDecks} />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard updateDecks={updateDecks} />\n          </Route>\n          <Route>\n            <NotFound />  \n          </Route>\n        </Switch>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}