{"ast":null,"code":"var _jsxFileName = \"/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { readDeck, listCards } from '../utils/api/index.js';\n\nfunction Study() {\n  const [deck, setDeck] = useState();\n  const [cards, setCards] = useState();\n  const [currentCard, setCurrentCard] = useState(0);\n  const {\n    deckId\n  } = useParams();\n  useEffect(() => {\n    const findDeck = async () => {\n      const currDeck = await readDeck(deckId);\n      setDeck(() => currDeck);\n    };\n\n    findDeck();\n\n    const findCards = async () => {\n      const cardsList = await listCards(deckId);\n      setCards(() => cardsList);\n    };\n\n    findCards();\n  }, [deckId]);\n\n  const nextHandler = () => {\n    setCurrentCard(currentCard => currentCard + 1);\n    console.log(currentCard);\n  };\n\n  if (!deck || !cards) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sr-only\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }, \"Loading...\"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-9 mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      \"aria-label\": \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"ol\", {\n      className: \"breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-home\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 72\n      }\n    }), \" Home\")), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 57\n      }\n    }), deck.name), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item active\",\n      \"aria-current\": \"page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }\n    }, \"Study\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, deck.name, \": Study\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row p-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card w-75\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 29\n      }\n    }, \"Card \", currentCard + 1, \" of \", cards.length), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 29\n      }\n    }, cards[currentCard].front), /*#__PURE__*/React.createElement(\"button\", {\n      href: \"#\",\n      className: \"btn btn-secondary mr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 29\n      }\n    }, \"Flip\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: nextHandler,\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    }, \"Next\")))));\n  }\n}\n\nexport default Study; // The Study screen has the following features:\n// The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n// There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n// The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.","map":{"version":3,"sources":["/Users/shakur/www/qualifiedChallenges/Flashcard_App/src/Layout/Study.js"],"names":["React","useState","useEffect","Link","useParams","readDeck","listCards","Study","deck","setDeck","cards","setCards","currentCard","setCurrentCard","deckId","findDeck","currDeck","findCards","cardsList","nextHandler","console","log","name","length","front"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { readDeck, listCards } from '../utils/api/index.js'\n\n\nfunction Study() {\n    const [deck, setDeck] = useState();\n    const [cards, setCards] = useState();\n    const [currentCard, setCurrentCard] = useState(0);\n    const {deckId} = useParams();\n    \n    useEffect(() => { \n        const findDeck = async () => { \n            const currDeck = await readDeck(deckId);\n            setDeck(()=> currDeck);    \n        } \n        findDeck();\n        const findCards = async () => { \n            const cardsList = await listCards(deckId);\n            setCards(()=> cardsList);\n        } \n        findCards();\n\n    }, [deckId]);\n\n    const nextHandler = () => {\n        setCurrentCard((currentCard) => currentCard+1);\n        console.log(currentCard);\n    }\n\n    if (!deck || !cards) {\n        return (\n            <div className=\"spinner-border text-primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"col-9 mx-auto\">\n                {/* Breadcrumbs */}\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\"><Link to={\"/\"}><i className=\"fa fa-home\" aria-hidden=\"true\"></i> Home</Link></li>\n                        <li className=\"breadcrumb-item\"><Link href=\"#\"></Link>{deck.name}</li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n                    </ol>\n                </nav>\n                {/* Title */}\n                <div>\n                    <h1>{deck.name}: Study</h1>\n                </div>\n                {/* Card */}\n                <div className=\"row p-3\">\n                    <div className=\"card w-75\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">Card {currentCard+1} of {cards.length}</h5>\n                            <p className=\"card-text\">{cards[currentCard].front}</p>\n                            <button href=\"#\" className=\"btn btn-secondary mr-3\">Flip</button>\n                            <button onClick={nextHandler} className=\"btn btn-primary\">Next</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Study;\n\n// The Study screen has the following features:\n\n    // The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n    // There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n    // The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck."]},"metadata":{},"sourceType":"module"}